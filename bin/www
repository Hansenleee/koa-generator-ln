#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('babel-register')
var app = require('../app');
var debug = require('debug')('demo:server');
var http = require('http');
// 日志处理模块
var fs = require('fs');
var logConfig = require('../config/log_config');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
// 日志初始化
initConfigLog()

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * 判断路径是否存在，不存在则创建
 * @param {String} pathStr - 路径
 */
function confirmPath(pathStr) {
  if(!fs.existsSync(pathStr)){
      fs.mkdirSync(pathStr);
      console.log('createPath: ' + pathStr);
    }
}

/**
 * 日志初始化
 */
function initConfigLog() {
  //创建log的根目录'logs'
  const baseLogPath = logConfig.baseLogPath
  if(baseLogPath){
    confirmPath(baseLogPath)
    //根据不同的logType创建不同的文件目录
    const appenders = logConfig.appenders
    Object.keys(appenders).forEach((key) => {
      // 判断每个log分类下的日志文件是否存在
      const path = appenders[key].path
      if (path) {
        confirmPath(baseLogPath + path)
      }
    })
  }
}
